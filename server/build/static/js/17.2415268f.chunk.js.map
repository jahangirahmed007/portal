{"version":3,"sources":["Components/LoginAdmin/LoginAdmin.js"],"names":["LoginAdmin","state","username","password","loader","errors","showPassword","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","user","console","log","props","loginUser","togglePassword","this","auth","isAuthenticated","type","history","push","nextProps","data","err","className","style","height","width","backgroundColor","htmlFor","onChange","id","color","class","onClick","cursor","fontWeight","disabled","Component","connect","Auth","Errors"],"mappings":"kMAGMA,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,SAAU,GACVC,QAAQ,EACRC,OAAQ,GACRC,cAAc,G,EAEhBC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAqC9BC,aAAe,SAACL,GACdA,EAAEM,iBACF,IAAMC,EAAO,CACXb,SAAU,EAAKD,MAAMC,SACrBC,SAAU,EAAKF,MAAME,UAEvBa,QAAQC,IAAIF,GACZ,EAAKG,MAAMC,UAAUJ,GAMrB,EAAKN,SAAS,CACZL,QAAQ,EACRC,OAAQ,M,EAIZe,eAAiB,WACf,EAAKX,SAAS,CACZH,cAAe,EAAKL,MAAMK,gB,mEArDU,IAApCe,KAAKH,MAAMI,KAAKC,iBACc,UAA9BF,KAAKH,MAAMI,KAAKP,KAAKS,KAErBH,KAAKH,MAAMO,QAAQC,KAAK,eAEY,IAApCL,KAAKH,MAAMI,KAAKC,iBACc,UAA9BF,KAAKH,MAAMI,KAAKP,KAAKS,MAErBH,KAAKH,MAAMO,QAAQC,KAAK,gB,uDAGKC,GAC/BX,QAAQC,IAAIU,EAAW,eAEc,IAAnCA,EAAUL,KAAKC,iBACc,UAA7BI,EAAUL,KAAKP,KAAKS,KAEpBH,KAAKH,MAAMO,QAAQC,KAAK,eAEW,IAAnCC,EAAUL,KAAKC,iBACc,UAA7BI,EAAUL,KAAKP,KAAKS,MAEpBH,KAAKH,MAAMO,QAAQC,KAAK,cAEtBC,EAAUtB,OAAOuB,MACnBP,KAAKZ,SAAS,CACZJ,OAAQsB,EAAUtB,OAAOuB,KACzBxB,QAAQ,M,+BA8BZ,IAAIyB,EAAMR,KAAKpB,MAAMI,OACrB,OACE,yBAAKyB,UAAU,+CACb,yBACEA,UAAU,sFACVC,MAAO,CACLC,OAAQ,QACRC,MAAO,QACPC,gBAAiB,YAGnB,wBAAIJ,UAAU,mBAAd,WAEA,0BAAMA,UAAU,IACd,yBAAKA,UAAU,cACb,2BAAOA,UAAU,aAAaK,QAAQ,YAAtC,YAGA,2BACEX,KAAK,OACLZ,MAAOS,KAAKpB,MAAMC,SAClB4B,UAAU,kBACVM,SAAUf,KAAKd,aACf8B,GAAG,WACH1B,KAAK,WACLoB,MAAO,CAAEG,gBAAiB,cAAeI,MAAO,WAGlD,yBAAKR,UAAU,eACb,2BAAID,EAAI3B,UAAc,MAG1B,yBAAK4B,UAAU,gBACb,2BAAOA,UAAU,aAAaK,QAAQ,YAAtC,YAGA,yBAAKL,UAAU,eACb,2BACEN,KAAMH,KAAKpB,MAAMK,aAAe,OAAS,WACzC+B,GAAG,WACH1B,KAAK,WACLmB,UAAU,gBACVlB,MAAOS,KAAKpB,MAAME,SAClBiC,SAAUf,KAAKd,aACfwB,MAAO,CAAEG,gBAAiB,cAAeI,MAAO,WAElD,yBAAKC,MAAM,sBACRlB,KAAKpB,MAAMK,aACV,0BACEwB,UAAU,mBACVU,QAASnB,KAAKD,eACdW,MAAO,CAAEU,OAAQ,YAHnB,QAQA,0BACEX,UAAU,mBACVU,QAASnB,KAAKD,eACdW,MAAO,CAAEU,OAAQ,YAHnB,UAUN,yBAAKX,UAAU,uBACb,2BAAID,EAAI1B,UAAc,MA2B1B,yBAAK2B,UAAU,iCACb,4BACEN,KAAK,SACLM,UAAU,yBACVC,MAAO,CAAEO,MAAO,SAAUI,WAAY,QACtCF,QAASnB,KAAKR,aACd8B,SAAUtB,KAAKpB,MAAMG,QAEpBiB,KAAKpB,MAAMG,OAAS,UAAY,iB,GA9KxBwC,aA4LVC,uBALS,SAAC5C,GAAD,MAAY,CAClCqB,KAAMrB,EAAM6C,KACZzC,OAAQJ,EAAM8C,UAGwB,CAAE5B,eAA3B0B,CAAwC7C","file":"static/js/17.2415268f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../Actions/index\";\r\nclass LoginAdmin extends Component {\r\n  state = {\r\n    username: \"\",\r\n    password: \"\",\r\n    loader: false,\r\n    errors: \"\",\r\n    showPassword: false,\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    if (\r\n      this.props.auth.isAuthenticated === true &&\r\n      this.props.auth.user.type === \"admin\"\r\n    ) {\r\n      this.props.history.push(\"/admindash\");\r\n    } else if (\r\n      this.props.auth.isAuthenticated === true &&\r\n      this.props.auth.user.type === \"agent\"\r\n    ) {\r\n      this.props.history.push(\"/agentdash\");\r\n    }\r\n  }\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    console.log(nextProps, \"next props\");\r\n    if (\r\n      nextProps.auth.isAuthenticated === true &&\r\n      nextProps.auth.user.type === \"admin\"\r\n    ) {\r\n      this.props.history.push(\"/admindash\");\r\n    } else if (\r\n      nextProps.auth.isAuthenticated === true &&\r\n      nextProps.auth.user.type === \"agent\"\r\n    ) {\r\n      this.props.history.push(\"/agentdash\");\r\n    }\r\n    if (nextProps.errors.data) {\r\n      this.setState({\r\n        errors: nextProps.errors.data,\r\n        loader: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const user = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n    };\r\n    console.log(user);\r\n    this.props.loginUser(user);\r\n    // if (this.props.erorr.Errors) {\r\n    //   this.setState({\r\n    //     loader: false,\r\n    //   });\r\n    // }\r\n    this.setState({\r\n      loader: true,\r\n      errors: \"\",\r\n    });\r\n  };\r\n\r\n  togglePassword = () => {\r\n    this.setState({\r\n      showPassword: !this.state.showPassword,\r\n    });\r\n  };\r\n  render() {\r\n    let err = this.state.errors;\r\n    return (\r\n      <div className=\" bg-light p-4 d-flex justify-content-center\">\r\n        <div\r\n          className=\"rounded-circle  mt-4 d-flex flex-column   align-items-center justify-content-center\"\r\n          style={{\r\n            height: \"450px\",\r\n            width: \"450px\",\r\n            backgroundColor: \"#3C4B84\",\r\n          }}\r\n        >\r\n          <h3 className=\"text-white mb-3\"> LOGIN </h3>\r\n\r\n          <form className=\"\">\r\n            <div className=\"form-group\">\r\n              <label className=\"text-white\" htmlFor=\"username\">\r\n                USERNAME\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.username}\r\n                className=\"   form-control\"\r\n                onChange={this.handleChange}\r\n                id=\"username\"\r\n                name=\"username\"\r\n                style={{ backgroundColor: \"transparent\", color: \"white\" }}\r\n              />\r\n\r\n              <div className=\" text-white\">\r\n                <b>{err.username}</b>{\" \"}\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group  \">\r\n              <label className=\"text-white\" htmlFor=\"password\">\r\n                PASSWORD\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type={this.state.showPassword ? \"text\" : \"password\"}\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  className=\"form-control \"\r\n                  value={this.state.password}\r\n                  onChange={this.handleChange}\r\n                  style={{ backgroundColor: \"transparent\", color: \"white\" }}\r\n                />\r\n                <div class=\"input-group-append\">\r\n                  {this.state.showPassword ? (\r\n                    <apan\r\n                      className=\"input-group-text\"\r\n                      onClick={this.togglePassword}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      Hide\r\n                    </apan>\r\n                  ) : (\r\n                    <apan\r\n                      className=\"input-group-text\"\r\n                      onClick={this.togglePassword}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      Show\r\n                    </apan>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\" text-white d-block\">\r\n                <b>{err.password}</b>{\" \"}\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"form-group\">\r\n              <label className=\"text-white\" htmlFor=\"password\">\r\n                PASSWORD\r\n              </label>\r\n              <input\r\n                type=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                name=\"password\"\r\n                id=\"password\"\r\n                className=\"form-control \"\r\n                style={{ backgroundColor: \"transparent\", color: \"white\" }}\r\n              />\r\n              <div class=\"input-group-append\">\r\n                {this.state.hidden_one ? (\r\n                  <apan className=\"input-group-text\">Hide</apan>\r\n                ) : (\r\n                  <apan className=\"input-group-text\">Show</apan>\r\n                )}\r\n              </div>\r\n              <div className=\" text-white\">\r\n                <b>{err.password}</b>{\" \"}\r\n              </div>\r\n            </div> */}\r\n            <div className=\"d-flex justify-content-center\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn bg-white px-3 mt-2\"\r\n                style={{ color: \"purple\", fontWeight: \"bold\" }}\r\n                onClick={this.handleSubmit}\r\n                disabled={this.state.loader}\r\n              >\r\n                {this.state.loader ? \"Loading\" : \"Login\"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.Auth,\r\n  errors: state.Errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { loginUser })(LoginAdmin);\r\n"],"sourceRoot":""}